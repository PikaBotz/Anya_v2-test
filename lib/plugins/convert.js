const fs = require('fs/promises');
const axios = require('axios');
const Config = require('../../config');
const { anya, delay, getRandom, tiny, TelegraPh, UploadFileUgu, audioToVideo, createVidSticker, writeExifInVid } = require('../lib');

//༺─────────────────────────────────────༻
/*
anya({
            name: "tourl",
            alias: ['url', 'tolink', 'link'],
            react: "🔗",
            need: "image",
            category: "convert",
            desc: "Convert image into urls",
            cooldown: 8,
            filename: __filename
      }, async (anyaV2, pika, { args, prefix, command }) => {
          const util = require("util");
          const quoted = pika.quoted ? pika.quoted : pika;
          const mime = quoted.msg ? quoted.msg : quoted.mimetype ? quoted.mimetype : quoted.mediaType || '';
          if (/image/.test(mime)) {
            const {key} = await pika.keyMsg(Config.message.wait);
            const media = await quoted.download();
            const path = `./.temp/${pika.sender.split('@')[0] + Math.random().toString(36).substr(2, 5)}`;        
            await fs.writeFile(path + '.jpg', media);
            TelegraPh("./lib/Assets/image_2.jpg")
            .then(response=> pika.edit("*🔗 Generated Media Url :*" + util.format(response)))
            .catch(err=> {
                console.log(err);
                return pika.edit(Config.message.error, key);
            });
          } else pika.reply(`Tag or reply a image with caption *${prefix + command}*`);
      }
)
*/
//༺─────────────────────────────────────༻

anya({
            name: "tempurl",
            alias: ['templink'],
            react: "🔗",
            need: "media",
            category: "convert",
            desc: "Convert medias into urls for 3 hours",
            cooldown: 10,
            filename: __filename
     }, async (anyaV2, pika, { args, prefix, command }) => {
          const quoted = pika.quoted ? pika.quoted : pika;
          const mime = quoted.msg ? quoted.msg : quoted.mimetype ? quoted.mimetype : quoted.mediaType || '';
          if (/image/.test(mime)) {
            const {key} = await pika.keyMsg(Config.message.wait);
            const media = await quoted.download(); 
            const path = `./.temp/${pika.sender.split('@')[0] + Math.random().toString(36).substr(2, 5)}.jpg`;        
            await fs.writeFile(path, media);
            const response = await UploadFileUgu(path);
            await pika.reply(`*⏳ Url Is Only Valid For 3 hrs*\n\n❒ Filename : ${response.filename}\n❒ Size : ${(response.size / 1000000).toFixed(2)}MB\n❒ Url : ${response.url}`, key);
          } else if (/video/.test(mime)) {
            const {key} = await pika.keyMsg(Config.message.wait);
            const media = await quoted.download(); 
            const path = `./.temp/${pika.sender.split('@')[0] + Math.random().toString(36).substr(2, 5)}.mp4`;        
            await fs.writeFile(path, media);
            const response = await UploadFileUgu(path)
            pika.edit(`*⏳ Url Is Only Valid For 3 hrs*\n\n❒ Filename : ${response.filename}\n❒ Size : ${(response.size / 1000000).toFixed(2)}MB\n❒ Url : ${response.url}`, key);
          } else pika.reply(`Tag or reply a image/video with caption *${prefix + command}*`);
     }
)

//༺─────────────────────────────────────༻

anya({
            name: "atv",
            alias: ["audtovid"],
            react: "🍂",
            need: "audio",
            category: "convert",
            desc: "Convert audio to videos",
            filename: __filename
     }, async (anyaV2, pika, { args, prefix, command }) => {
        const quoted = pika.quoted || '';
        const mime = (quoted && quoted.mimetype) ? quoted.mimetype : '';
        if (/audio/.test(mime)) {
            const {key} = await pika.keyMsg(Config.message.wait);
            const media = await quoted.download();
            audioToVideo(media)
            .then(async res=>{
                await anyaV2.sendMessage(pika.chat, {
                    video: res.buffer,
                    caption: tiny("Generated By " + Config.botname)
                }, {quoted:pika})
                .then(()=> pika.deleteMsg(key));
            })
            .catch(err=> {
                console.error(err);
                pika.edit(Config.message.error, key);
            });
        } else pika.reply(`Reply a audio with caption *${prefix+command}*`);
     }
)

//༺─────────────────────────────────────༻

anya({
        name: "sticker",
        alias: ['s', 'stick'],
        react: "❤️‍🔥",
        need: "media",
        category: "convert",
        desc: "Convert media into stickers",
        filename: __filename
    }, async (anyaV2, pika, { args, prefix, command }) => {
        const text = args.join(" ");
        const quoted = pika.quoted ? pika.quoted : '';
        const mime = (quoted && quoted.mimetype) ? quoted.mimetype : '';
        const path = `./.temp/${pika.sender.split('@')[0] + getRandom(4)}`;
        if (/webp/.test(mime)) {
            const fs = require('fs');
            const media = await quoted.download();
            fs.writeFileSync(path + '.webp', media);
            await writeExifInVid(path + '.webp', { packname: Config.packname, author: Config.author })
            .then(async res=> {
                await anyaV2.sendMessage(pika.chat, { sticker: fs.readFileSync(res) }, { quoted: pika });
                fs.unlinkSync(res);
            })
            .catch(err=> {
                console.error(err);
                pika.reply(Config.message.error + '\n\n' + err);
            })
        } else if (/video/.test(mime)) {
            const video = await quoted.download();
            const buffer = await createVidSticker(video, { packname: Config.packname, author: Config.author });
            await anyaV2.sendMessage(pika.chat, { sticker: buffer }, { quoted: pika });
        } else if (/image/.test(mime)) {
            const image = await quoted.download();
            axios.post(api.apiHubRaw + `/api/sticker?key=${api.apiHubKey}&packname=${Config.packname}&author=${Config.author}`, { media: image.toString('base64') }, {
                  headers: {
                    'content-type': 'application/json'
                  }
            })
            .then((res) => res.data)
            .then(async res=> { await anyaV2.sendMessage(pika.chat, { sticker: Buffer.from(res.results.sticker, 'base64') }, { quoted: pika }); })
            .catch(err=> {
                console.error(err);
                pika.reply(Config.message.error);
            })
        } else pika.reply(`Reply or tag a media/sticker with caption ${prefix + command} to make sticker`)
    }
)